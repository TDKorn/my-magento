{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Add discount on each product based on product price\n",
    "\n",
    "I saw this question on [Magento StackExchange](https://magento.stackexchange.com/questions/362960/add-discount-on-each-product-based-on-product-price):\n",
    "\n",
    "```{admonition} Question\n",
    "\n",
    "I have 100 products in my store and each product has different price. I want to add discount on each product based on specific price. For example, If a product is added into the cart and it has 100usd price then i want to apply 10% discount on it and if a product is added into the cart and it has 110usd price then i want to apply 11% discount on it and so on. I hope you understand what I want to achieve. in simple words, discount on each product based on product price. Thanks\n",
    "\n",
    "\n",
    "```\n",
    "\n",
    "## Solution Using MyMagento\n",
    "\n",
    "First, you'll want to\n",
    "{doc}`logging-in`\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import magento\n",
    "\n",
    ">>> api = magento.get_api()"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Let's say we have the skus of the 100 products in an array.\n",
    "\n",
    "We can use a {py:class}`~.ProductSearch` retrieve these products as {py:class}`~.Product` objects using {py:meth}`~.ProductSearch.by_skulist`"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    ">>> skus = [f\"test_sku{n}\" for n in range(1, 101)]\n",
    ">>> products = api.products.by_skulist(skus)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "To retrieve the {py:class}`~.Product` objects using a field other than ``sku``, like ``product_id``, we can use {py:meth}`~.SearchQuery.by_list`:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    ">>> product_ids = list(range(1,101))\n",
    ">>> products = api.products.by_list(\n",
    "...     field=\"entity_id\",   # To search by product_id\n",
    "...     values=product_ids\n",
    "... )"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "is_executing": true
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Once we have our list of {py:class}`~.Product` objects, we can calculate the discount based on their price, then update the ``special_price`` (discount price) using the {py:meth}`.Product.update_special_price` method"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    ">>> for product in products:\n",
    "...     if product.price < 100:\n",
    "...         continue\n",
    "...\n",
    "...     discount = product.price / 1000\n",
    "...     price = product.price * (1 - discount)\n",
    "...     product.update_special_price(round(price, 2))"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We loop through our list of products and\n",
    "1. Skip the products if the ``price`` is not $100 or more\n",
    "2. Calculate the discount percentage by dividing the ``price`` by 1000\n",
    "3. Calculate the new, discounted product price by multiplying the current ``price`` by ``1 - discount``\n",
    "4. Use the new price we calculated to update the ``special_price`` of the product"
   ],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
